<definitions
    name="NodeAgentService"
    targetNamespace="http://net/exogeni/orca/nodeagent"
    xmlns:tns="http://net/exogeni/orca/nodeagent"
    xmlns="http://schemas.xmlsoap.org/wsdl/"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
    xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
    xmlns:types="http://net/exogeni/orca/nodeagent/documents">

  <import namespace="http://net/exogeni/orca/nodeagent/documents" location="types.xsd" />    

  <!-- Executing a script -->
  <message name="executeScriptRequest">
    <part name="args" element="types:scriptElement"/>
  </message>
  <message name="executeScriptResponse">
    <part name="args" element="types:scriptResultElement" />
  </message>
  
  <!-- Executing a driver -->
  <message name="executeDriverRequest">
    <part name="args" element="types:driverRequestElement" />
  </message>  
  <message name="executeDriverResponse">
    <part name="args" element="types:resultElement" />
  </message>  
  
  <!-- Executing an object driver -->
  <message name="executeObjectDriverRequest">
    <part name="args" element="types:driverObjectRequestElement" />
  </message>  
  <message name="executeObjectDriverResponse">
    <part name="args" element="types:resultElement" />
  </message>  

  <!-- Installing a driver -->
  <message name="installDriverRequest">
    <part name="args" element="types:driverElement" />
  </message>  
  <message name="installDriverResponse">
    <part name="args" element="types:resultElement" />
  </message>  

  <!-- Upgrading a driver -->
  <message name="upgradeDriverRequest">
    <part name="args" element="types:driverElement" />
  </message>  
  <message name="upgradeDriverResponse">
    <part name="args" element="types:resultElement" />
  </message>  

  <!-- Uninstalling a driver -->
  <message name="uninstallDriverRequest">
    <part name="args" element="types:driverElement" />
  </message>  
  <message name="uninstallDriverResponse">
    <part name="args" element="types:resultElement" />
  </message>  

  <!-- Ionut test function -->
  <message name="testFuncRequest">
    <part name="args" element="types:testFuncElement" />
  </message>
  <message name="testFuncResponse">
    <part name="args" element="types:testFuncResultElement" />
  </message> 
  
  <!-- Register a public key/certificate -->
  <message name="registerKeyRequest">
    <part name="args" element="types:registerKeyElement" />
  </message>
  <message name="registerKeyResponse">
    <part name="args" element="types:registerKeyResultElement" />
  </message>
  
  <!-- Unregister a public key/certificate -->
  <message name="unregisterKeyRequest">
    <part name="args" element="types:unregisterKeyElement" />
  </message>
  <message name="unregisterKeyResponse">
    <part name="args" element="types:unregisterKeyResultElement" />
  </message>

  <!-- Register the first public key/certificate -->  
  <message name="registerAuthorityKeyRequest">
    <part name="args" element="types:registerAuthorityKeyElement" />
  </message>
  <message name="registerAuthorityKeyResponse">
    <part name="args" element="types:registerAuthorityKeyResultElement" /> 
    <!-- <part name="args" element="types:getServiceKeyResultElement" /> -->
  </message>
  
  <!-- Get NA public key/certificate -->  
  <message name="getServiceKeyRequest">
    <part name="args" element="types:getServiceKeyElement" />
  </message>
  <message name="getServiceKeyResponse">
    <part name="args" element="types:getServiceKeyResultElement" />
  </message>

  <portType name="NodeAgentPortType">
    <operation name="executeScript" parameterOrder="args">
      <input message="tns:executeScriptRequest" name="executeScriptRequest" />
      <output message="tns:executeScriptResponse" name="executeScriptResponse" />
    </operation>
    <operation name="executeDriver" parameterOrder="args">
      <input message="tns:executeDriverRequest" name="executeDriverRequest" />
      <output message="tns:executeDriverResponse" name="executeDriverResponse" />
    </operation>
    <operation name="executeObjectDriver" parameterOrder="args">
      <input message="tns:executeObjectDriverRequest" name="executeObjectDriverRequest" />
      <output message="tns:executeObjectDriverResponse" name="executeObjectDriverResponse" />
    </operation>
    <operation name="installDriver" parameterOrder="args">
      <input message="tns:installDriverRequest" name="installDriverRequest" />
      <output message="tns:installDriverResponse" name="installDriverResponse" />
    </operation>
    <operation name="upgradeDriver" parameterOrder="args">
      <input message="tns:upgradeDriverRequest" name="upgradeDriverRequest" />
      <output message="tns:upgradeDriverResponse" name="upgradeDriverResponse" />
    </operation>
    <operation name="uninstallDriver" parameterOrder="args">
      <input message="tns:uninstallDriverRequest" name="uninstallDriverRequest" />
      <output message="tns:uninstallDriverResponse" name="uninstallDriverResponse" />
    </operation>
    <operation name="testFunc">
      <input message="tns:testFuncRequest" name="testFuncRequest" />
      <output message="tns:testFuncResponse" name="testFuncResponse"/>
    </operation>
    <operation name="registerKey">
      <input message="tns:registerKeyRequest" name="registerKeyRequest" />
      <output message="tns:registerKeyResponse" name="registerKeyResponse" />
    </operation>
    <operation name="unregisterKey">
      <input message="tns:unregisterKeyRequest" name="unregisterKeyRequest" />
      <output message="tns:unregisterKeyResponse" name="unregisterKeyResponse" />
    </operation>
    <operation name="registerAuthorityKey">
      <input message="tns:registerAuthorityKeyRequest" name="registerAuthorityKeyRequest" />
      <output message="tns:registerAuthorityKeyResponse" name="registerAuthorityKeyResponse" />
    </operation>
    <operation name="getServiceKey">
      <input message="tns:getServiceKeyRequest" name="getServiceKeyRequest" />
      <output message="tns:getServiceKeyResponse" name="getServiceKeyResponse" />
    </operation>
  </portType>


  <binding name="NodeAgentService" type="tns:NodeAgentPortType">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http" />
    <operation name="executeScript">
      <soap:operation soapAction="executeScript" />
      <input name="executeScriptRequest">
        <soap:body use="literal" />
      </input>
      <output name="executeScriptResponse">
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="executeDriver">
      <soap:operation soapAction="executeDriver" />
      <input name="executeDriverRequest">
        <soap:body use="literal" />
      </input>
      <output name="executeDriverResponse">
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="executeObjectDriver">
      <soap:operation soapAction="executeObjectDriver" />
      <input name="executeObjectDriverRequest">
        <soap:body use="literal" />
      </input>
      <output name="executeObjectDriverResponse">
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="installDriver">
      <soap:operation soapAction="installDriver" />
      <input name="installDriverRequest">
        <soap:body use="literal" />
      </input>
      <output name="installDriverResponse">
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="upgradeDriver">
      <soap:operation soapAction="upgradeDriver" />
      <input name="upgradeDriverRequest">
        <soap:body use="literal" />
      </input>
      <output name="upgradeDriverResponse">
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="uninstallDriver">
      <soap:operation soapAction="uninstallDriver" />
      <input name="uninstallDriverRequest">
        <soap:body use="literal" />
      </input>
      <output name="uninstallDriverResponse">
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="testFunc">
      <soap:operation soapAction="testFunc" />
      <input name="testFuncRequest">
        <soap:body use="literal" />
      </input>
      <output name="testFuncResponse">
        <soap:body use="literal" />
      </output>
    </operation>
       <operation name="registerKey">
      <soap:operation soapAction="registerKey" />
      <input name="registerKeyRequest">
        <soap:body use="literal" />
      </input>
      <output name="registerKeyResponse">
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="unregisterKey">
      <soap:operation soapAction="unregisterKey" />
      <input name="unregisterKeyRequest">
        <soap:body use="literal" />
      </input>
      <output name="unregisterKeyResponse">
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="registerAuthorityKey">
      <soap:operation soapAction="registerAuthorityKey" />
      <input name="registerAuthorityKeyRequest">
        <soap:body use="literal" />
      </input>
      <output name="registerAuthorityKeyResponse">
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="getServiceKey">
      <soap:operation soapAction="getServiceKey" />
      <input name="getServiceKeyRequest">
        <soap:body use="literal" />
      </input>
      <output name="getServiceKeyResponse">
        <soap:body use="literal" />
      </output>
    </operation>
  </binding>
  
  <!-- service decln -->
  <service name="NodeAgentService">
    <port name="NodeAgentService" binding="tns:NodeAgentService">
      <soap:address location="http://localhost:8080/shirako/services/NodeAgentService" />
    </port>
  </service>

</definitions>
