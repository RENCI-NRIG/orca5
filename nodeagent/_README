1. External package dependencies

../lib/external contains all jars needed to run the service and the
clients.

./lib/ contains the addressing and rampart modules
(addressing-1.1.1.mar rampart-1.1.mar)


2. Keystores

./keystores contains server (server.jks), trusted client (client.jks)
and untrusted client (trudy.jks) keystores.

 - client.jks: keystore storing client key (pub/priv)
 - server.jks: server key (pub/priv)
 - trudy.jks: keystore storing a different client key (trudykey
pub/priv) and server key (pub). This client key is not included in
server.jks.

To create the keystore execute createKeyStores.sh script under keystores/

To check the entries into the keystores run:
keytool -list -keystore <nameofthekeystore>

The server certificate is stored under serverkey alias and the private
key is protected with serverkeypass password.  The client certificate
is stored under clienkey alias and the private key is protected with
clientkeypass password. On the server side the first registered
certificate will be stored with alias firstkey. This key can belong to
either a service manager or the site authority The trudy certificate
is stored under trudykey alias and the private key is protected with
trudykeypass password.

!!!NOTE: the certificates do expire :)! So please check the
certificates expiration date. Currently the certificates are valid
until August 6, 2007.  NOTE: server.jks and server keys are
generated programatically by the server when the first certificate
is registered (the one under firstkey alias)

the keystores passwords are:

server.jks -> serverstorepass
client.jks -> clientstorepass
trudy.jks  -> trudystorepass

3. Axis2 configuration
  3.1. Server side
       axis2.xml under src/resources 
  3.2. Client side       
       When creating a service create a ConfigurationContext from a modified axis2.xml. The axis2.xml should specify that 
       outgoing/incoming messages are signed. See examples in src/shirako/nodemanager/tests/security and /src/resources.

4. Java configuration
   4.1 Install Bouncy Castle Provider in jdk1.5.0
	a) unrestriced policy files have to be added to the jdk configuration
       check http://java.sun.com/javase/downloads/index.jsp at the end, and download  Java Cryptography Extension (JCE) Unlimited 
       Strength Jurisdiction Policy Files 5.0

	b) To install Bouncy Castle Provider check: http://www.bouncycastle.org/specifications.html#install at the end of section 
	   "5.1 Examples"
	   
5. Tests
   5.1 Enabling/Disabling security
	To enable security uncomment the second <exec /> tag under wsdl target in build.xml. It will patch the sevice.xml file
	to enable security settings on the service side. The wsdl target should be executed (ant wsdl) and then the project 
	should be rebuilt (ant)     
		
   5.2 Tests with security disabled 
	- check package orca.nodeagent.nosecurity
	Run ant tests.nosecurity (the example invokes the test testFunc on the nodemanager service)	 
	      
   5.3 Tests with security enabled
	- check package orca.nodeagent.security/nosecurity
	
	a) package orca.nodeagent.nosecurity.TestAddAuthorityKey calls registerAuthorityKey to register the first certificate
	   with the node. The service keys/keystore are generated if the call succeeds. The service key is obtained through a call
	   to getServiceKey. The service key is stored as a trusted key in client.jks.
	   run: ant tests.nosecurity.add 
	   ant handler: ant -f test.xml add.authority.key (uses ant task)
	
	b) package orca.nodeagent.nosecurity.TestGetServiceKey invokes
	   the node agent  by calling the getServiceKey
	   function. It retrieves the server certificate and stores it in client.jks 
	   run: ant tests.nosecurity.getservicekey
	   
TIP: In order to avoid passing the hash value on the boot command line you can edit lilo.conf or grub.conf. For lilo.conf
add the line append="AUTH_HASH=21:29:74:1D:DC:5E:4B:59:75:6F:E9:C0:A6:2E:E0:9D NODE_TOKEN=1234567890" and run lilo. 
This hash should enable TestAddAuthorityKey to succeed (register the first key). The AUTH_HASH is represented in hexadecimal 
format. NODE_TOKEN is a string. (Check NodeAgentService for details.) 
		
	c) package orca.nodeagent.security.known.Test invokes the nodemanager with security enabled on the client side. 
	   The call should succeed since the clientkey is stored/trusted in the server keystore (server.jks)
	   run: ant.tests.security.known
		
	d) package orca.nodeagent.security.unknown.Test invokes the nodemanager with security enabled on the client side. 
	   The call should fail since trudykey is not store/untrusted in the server keystore (server.jks)
	   run: ant tests.security.unknwon
		
	e) package orca.nodeagent.security.known.Test1 requests the nodemanager to add into the keystore under alias trudykey
	   Trudy's certificate. The call is made by a trusted client (clientkey is stored in server.jks) so it should succeed. 
	   run: ant tests.security.known.add  
		    
	f) package orca.nodeagent.security.known.Test2 requests the nodemanager to remove from the keystore the certificate
	   under alias trudykey. The call is made by a trusted client (clientkey is stored in server.jks) so it should succeed.
	   run: ant tests.security.knwon.remove
	   
	   If e) is called before f) the call should fail on the client side because trudy.jks does not trust the service certificate.
	   (service certificate is not registered with trudy.jks in a)
	   
6. Configuration files
	6.1 service side
	a) services.xml
	   The patch.service.xml.pl script adds for each function of the service the InflowSecurity and OutflowSecurity 
	   parameters. The registerFirstKey function is the only one not protected by security settings.
	   service.xml specifies the classes used to provide the service private key password stored in service keystore 
	   (server.jks). The private key is used to sign (or encrypt) the messages to the client.  
	   
	   <parameter name="InflowSecurity">
   		 <action>
     		<items>Signature</items>
     		<passwordCallbackClass>shirako.nodemanager.PWCallbackHandlerServer</passwordCallbackClass>
     		<signaturePropFile>service.properties</signaturePropFile>
   		 </action>
	   </parameter>

	   <parameter name="OutflowSecurity">
    	 <action>
      	    <items>Signature</items>
       		<user>serverkey</user>
       		<passwordCallbackClass>shirako.nodemanager.PWCallbackHandlerServer</passwordCallbackClass>
       		<signaturePropFile>service.properties</signaturePropFile>
       		<signatureKeyIdentifier>DirectReference</signatureKeyIdentifier>
    	  </action>
	   </parameter>	   
	   
	   b)service.properties
	   Specifies the crypto provider (for the service side is our own crypto provider so that we are able to refresh the
	   keys in the service keystore (server.jks)), the type of the keystore (jks), the password protecting the entries in the
	   keystore and the keystore file name.
	   
	   org.apache.ws.security.crypto.provider=orca.axis2.tools.MerlinKeyRegister
	   org.apache.ws.security.crypto.merlin.keystore.type=jks
           org.apache.ws.security.crypto.merlin.keystore.password=serverstorepass
           org.apache.ws.security.crypto.merlin.file=server.jks 
       
       6.2 client side
       a) client.axis2.xml
       On the client side we create a ConfigurationContext from the axis2 jar files and modules (/lib/trunk/axis2).
       The client needs an axis2.xml file in order to configure the container (see examples under 
       src/shirako/nodemanager/tests/security and /src/resources). 
       
       The client should engage the rampart module and provide the OuflowSecurity and InflowSecurity parameters. It specifies
       the class used to provide the client private key password protecting client certificate in the keystore. The client
       needs its private key in order to sign the messages. 
       
       <module ref="rampart"/>
       <parameter name="OutflowSecurity">
          <action>
             <items> Signature </items>
             <user>clientkey</user>     <!--alias of the key used to sign-->
             <passwordCallbackClass>shirako.nodemanager.tests.security.known.PWCallbackHandlerClient</passwordCallbackClass>
             <signaturePropFile>client.properties</signaturePropFile>
             <signatureKeyIdentifier>DirectReference</signatureKeyIdentifier>   <!-- DirectReference -->
          </action>
        </parameter>

        <parameter name="InflowSecurity">
           <action>
    	      <items> Signature </items>
    	      <passwordCallbackClass>shirako.nodemanager.tests.security.known.PWCallbackHandlerClient</passwordCallbackClass>
    	      <signaturePropFile>client.properties</signaturePropFile>
	       </action>
	    </parameter>
	    
	    b) client.properties
	    Specifies the crypto provider (for the client side is the standrd crypto provider Merlin), the type of the keystore (jks),
	    the password protecting the entries in the keystore and the keystore file name.
	    
	    org.apache.ws.security.crypto.provider=org.apache.ws.security.components.crypto.Merlin
		org.apache.ws.security.crypto.merlin.keystore.type=jks
		org.apache.ws.security.crypto.merlin.keystore.password=clientstorepass
		org.apache.ws.security.crypto.merlin.file=src/shirako/nodemanager/tests/secuirty/known/client.jks
	    
