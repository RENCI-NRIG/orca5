#!/bin/bash

# Project version number
version=2.1-SNAPSHOT

# orca subversion URL
url=https://geni-orca.renci.org/svn/orca

function die() {
	echo $1
	exit 1
}

function get_source() {
	for x in $dependencies; do
		echo "Processing source dependency: $x"
		if [ `basename $x` = "trunk" ]; then 
			# this is a trunk dependency
			dir=`dirname $x`
		else
			# this is a tags or branches dependency
			# strip the tag/branch name
			dir=`dirname $x`
			if [ `basename $dir` == "tags" ] || [ `basename $dir` == "branches" ]; then
				# strip tags/branches
				dir=`dirname $dir`
			else
				echo "invalid dependency $x"
				exit 1
			fi
		fi

		if [ "$dir" = "webapp2" ]; then
			dir="webapp"
		fi

		mkdir -p $dir || die "failed to create directory: $dir"

		#echo "svn co $url/$x $dir"

		svn co --non-interactive --trust-server-cert $url/$x $dir || die "failed to fetch $x"
	done
}


function make_poms() {
    local f=$1/pom.xml
    local id=$2
    local level=$3

	if [ ! -e $f ]; then
		echo "generating pom file: $f"
		echo "<project xmlns=\"http://maven.apache.org/POM/4.0.0\"" >> $f
        echo "         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"" >> $f
        echo "         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">" >> $f
        echo "" >> $f
        echo "  <modelVersion>4.0.0</modelVersion>" >> $f
    	echo "  <groupId>orca</groupId>" >> $f
    	echo "  <artifactId>$id</artifactId>" >> $f
    	echo "  <packaging>pom</packaging>" >> $f
    	echo "  <version>$version</version>" >> $f
 		echo "" >> $f
		echo "  <name>Orca Helper Project $level</name>" >> $f
 		echo "    <modules>" >> $f

		for x in $1/*; do
			if [ -d $x ] && [ `basename $x` != "workspace" ]; then 
				echo "      <module>`basename $x`</module>" >> $f
			fi
		done
		echo "    </modules>" >> $f
		echo "</project>" >> $f

		for x in $1/*; do
			if [ -d $x ] && [ `basename $x` != "workspace" ]; then
				make_poms $x $id-`basename $x` "(`basename $x`)"
			fi
		done
	fi
}

function remove_poms() {
	for x in `find . -name "pom.xml" | xargs grep "Orca Helper Project" | awk -F: '{print $1}'`; do
		echo "Removing autogenerated pom file: $x"
		rm $x || die "failed to remove $x"
	done
}

function svn_stat() {
	for x in  `find . -name "pom.xml" | xargs grep "Orca Helper Project" | awk -F: '{print $1}'`; do
		for y in `dirname $x`/*; do
			if [ -d $y ] && [ `basename $y` != "target" ] && [ $y != "./controllers" ] && [ $y != "./drivers" ] && [ $y != "./handlers" ] && [ $y != "./manage" ] && [ $y != "./tools" ] && [ $y != "./tests" ]; then
				echo "Checking for local changes in $y"
				svn stat $y
			fi
		done
	done
}

function svn_up() {
	for x in  `find . -name "pom.xml" | xargs grep "Orca Helper Project" | awk -F: '{print $1}'`; do
		for y in `dirname $x`/*; do
			if [ -d $y ]; then
				echo "Checking for repository changes in $y"
				svn up $y
			fi
		done
	done
}

function check_for_tags() {
	for x in  `find . -name "pom.xml" | xargs grep "Orca Helper Project" | awk -F: '{print $1}'`; do
		for y in `dirname $x`/*; do
			if [ -d $y ]; then
				url=`svn info $y | grep URL | awk '{print $2}'`
				if [ ! -z $url ]; then
					if [ ! `basename $url` == "trunk" ]; then
						url=`dirname $url`
						echo $url
						if [ `basename $url` == "tags" ]; then
							echo "**** Found tagged code under $y ****"
							svn stat $y
						fi
					fi	
				fi
			fi
		done
	done
}

function purge() {
	for x in $dependencies; do
		echo "Purging source dependency: $x"
		if [ `basename $x` = "trunk" ]; then 
			# this is a trunk dependency
			dir=`dirname $x`
		else
			# this is a tags or branches dependency
			# strip the tag/branch name
			dir=`dirname $x`
			if [ `basename $dir` == "tags" ] || [ `basename $dir` == "branches" ]; then
				# strip tags/branches
				dir=`basename $dir`
			else
				echo "invalid dependency $x"
				exit 1
			fi
		fi
		rm -rf $dir
	done
	remove_poms
}


if [ $# -lt 2 ]; then
	echo "Usage: dependencies_list command"
	echo "dependencies_list is a space delimited list of repository paths"
	echo "command can be one of the following:"
	echo "   getsrc - obtains the source code from the repository"
    echo "   mkpom  - generates required pom files"
    echo "            requires the following parameters:"
    echo "            * version - version number for autogenerated poms" 
    echo "   rmpom  - removes autogenerated pom files"
    echo "   stat   - checks for local changes"
    echo "   up     - pulls repository changes"
	echo "   tags   - checks if any of the source has been checked out from a tag"
	echo "   purge  - deletes all sources"
	exit 1
fi

dependencies=$1
case $2 in
	getsrc)
		echo "obtaining project sources"
		get_source
		;;
	mkpom)
		if [ -z $3 ]; then
			die "version parameter is missing"
		fi
		version=$3
		echo "autogenerating pom files"
		make_poms `pwd` build-all
		;;
	rmpom)
		echo "removing autogenerated poms"
		remove_poms
		;;
	stat)
		echo "checking for local changes"
		svn_stat
		;;
	up)
		echo "pulling repository changes"
		svn_up
		;;
	tags)
		echo "checking for tagged code"
		check_for_tags
		;;
	purge)
		ech0 "purging sources"
		purge
		;;
	*)
		echo "unsupported option"
		exit 1
esac


