 ------
 SOAP Programming Notes
 ------
 Aydan Yumerefendi
 ------
 22 August 2008
 ------

Introduction
 
 The Shirako leasing core supports interactor communication using the
 SOAP protocol. At present, two SOAP implementations are supported:
 Axis and Axis2. This document describes the support for Axis2.

SOAP and Axis2 in Shirako

 The package orca.shirako.proxies.soapaxis2 is responsible for
 interactor communication using the SOAP protocol and axis2.  The
 package contains the following sub-packages:

   * beans - contains autogenerated java classes used to serialize
     arguments and results of SOAP calls

   * services - contains autogenerated and regular java classes used
     to represent stubs to actor services. The package also contains
     the different service implementations.

   * util - contains useful tools to help verify and pass information
     over SOAP.

   []

Service Definitions

 Each service API is defined in a WSDL file. The WSDL files are
 located in the shirako project under
 resources/proxies/soapaxis2/wsdl. The definitions for all types are
 stored in one shared file, types.xsd, while the definition for each
 service is in a separate WSDL file.

 To regenerate the SOAP beans and service clients use the ant script
 at the root of the shirako project:

   * ant proxies.soap.axis2.beans will regenerate the all beans and
     copy the resulting java files to the correct location.

   * ant proxies.soap.axis2.services will regenerate all service stubs
     and copy the resulting java files to the correct location. Note
     that this script will not copy the autogenerated service skeleton
     files since these will overwrite our code. When adding a new
     method, one must manually add the method to the service skeleton.

     
"Hacks"

 Axis2 inside a servlet container uses the AxisServlet class as its
 entry point. At start time, the AxisServlet class makes an instance
 of an Axis2 ConfigurationContext class, which is used to bootstrap
 Axis2. It turns out that the Orca container and the AxisServlet must
 share the same context, if we are to be able to add/remove SOAP
 services dynamically at runtime. An additional complication arises
 from the fact, that in Orca we may need to choose a different Axis2
 configuraiton depending on the Orca startup configuration. For
 example, enabling/disabling digitally signedned
 communication. Furthermore, the AxisServlet is initialized after the
 Orca container.

 To deal with these complications, we made some minor modifications to
 the AxisServlet class. The change is rather simple: make it possible
 for the servlet to take in an existing ConfigurationContext at start
 time, instead of creating its own using the default configuration
 file locations. In this way Orca and the AxisServlet share the same
 context and can operate on the same services.

 The modified axis2 sources can be found under:

--- 
 https://svn.nicl.cs.duke.edu/svn/cereus/orca/modified/axis2-1.1.1/
---
 
Digital signatures:

 The SOAP implementation supports digitally signed communication using
 WS-Security. The use of digital signatures is controlled by a flag in
 the container.properties file.

 To disable the use of digital signatures:

---
secure.communication=false
---

 To enable digital signatures:

---
secure.communication=true
---

 <<Note:>> At present, this flag also controlls the communication with
 the node agent service. Changing the flag will affect the behavior of
 inter-actor communication as well as communication with node agent
 services. 
 
Configuration:

 To configure a container for using SOAP and Axis2 do the following:

  [[1]] Enable the SOAP protocol

  Add the following to the locations section of the configuration XML
  file:

+------------------------------------------------------+

<location protocol="soapaxis2" url="http://HOST_IP:ORCA_PORT/orca" />
+------------------------------------------------------+


  Where url attribute should point to the root of the Orca web
  application. Please replace HOST_IP with the host name or ip address
  of the server, and ORCA_PORT with the web application's port
  number.

  This line enables the SOAP protocol and Orca will deploy the
  required services for each actor.

  [[2]] Link two actors using the SOAP protocol

  Note that by defailt communication between two actors is done using
  the local protocol (direct function invocation, works only if both
  actors reside in the same Orca container). To enable actors to
  communicate over soap modify the definition of the "to" edge by
  adding a location element as shown:

+----------------------------+
<edge>
   <from name="service" type="sm" />
   <to name="broker" type="agent">
     <location protocol="soapaxis2" url="http://REMOTE_HOST_IP:ORCA_PORT/orca/services/ACTOR_NAME" />
   </to>
</edge>
+----------------------------+

  The url attribute should point to the location of the SOAP web
  service for the actor.

  []

Testing the Configuration

  Deploy the service in Tomcat and navigate to /orca/services. You
  should be able to see at least the container manager service.

  
