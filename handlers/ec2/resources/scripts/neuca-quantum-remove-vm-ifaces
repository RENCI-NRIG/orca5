#!/usr/bin/env python
import logging.handlers
import os
import sys

sys.path.append(os.environ['EC2_DIR'] + "/scripts")

from nova_essex_common import *

try:
    sys.path.append(os.environ['EC2_DIR'] + "/scripts")
    from neuca_quantum_common import *
    from nova_essex_common import *
except:
    print ('Error in neuca-quantum-remove-vm-ifaces: cannot import neuca_quantum_common.py')
    sys.exit(1)

try:
    # OPEN THE LOG
    LOG.basicConfig(level=LOG.DEBUG, filename='/dev/null')

    if not os.path.exists(os.environ['EC2_LOG_DIR']):
        os.makedirs(os.environ['EC2_LOG_DIR'])

    handler = LOG.handlers.RotatingFileHandler(os.environ['EC2_LOG_DIR'] + '/' + os.environ['EC2_LOG_FILE'],
                                               backupCount=10, maxBytes=50000000)

    if os.environ['EC2_LOG_LEVEL'].lower() == 'debug':
        handler.setLevel(logging.DEBUG)
    elif os.environ['EC2_LOG_LEVEL'].lower() == 'error':
        handler.setLevel(logging.ERROR)
    elif os.environ['EC2_LOG_LEVEL'].lower() == 'info':
        handler.setLevel(logging.INFO)
    else:
        handler.setLevel(logging.INFO)

    formatter = logging.Formatter(
        '%(asctime)s -- neuca-quantum-remove-vm-ifaces %(process)d %(levelname)s : %(message)s')
    handler.setFormatter(formatter)

    LOG.getLogger('').addHandler(handler)

    LOG.info('Starting Logger')

except Exception as e:
    print ('Error in neuca-quantum-remove-vm-ifaces: Cannot open log file')
    print (type(e))
    print (e.args)
    print (e)
    sys.exit(1)

# log the environment
for i in os.environ:
    LOG.debug(str(i) + ": " + str(os.environ[i]))

try:
    # DO THE WORK
    LOG.debug("neuca-quantum-remove-vm-ifaces: " + str(sys.argv) + ", instance: " + str(
        os.environ['UNIT_EC2_INSTANCE']) + ', ifaces: ' + str(os.environ['UNIT_QUANTUM_IFACES']))

    ifaces = os.environ['UNIT_QUANTUM_IFACES'].split(',')

    iface_uuids = []
    for iface in ifaces:
        iface_uuids.append(iface)

    LOG.debug("neuca-quantum-remove-vm-ifaces: iface_uuids = " + str(iface_uuids))

    NEuca_Quantum_Network().remove_all_vm_ifaces(iface_uuids)

    print ('OK')

except Exception as e:
    LOG.error("neuca-quantum-remove-vm-ifaces: " + str(type(e)) + " : " + str(e) + "\n" + str(traceback.format_exc()))
    sys.exit(1)

sys.exit(0)
