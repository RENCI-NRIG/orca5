#!/usr/bin/env python 
import logging.handlers
import os
import sys

sys.path.append(os.environ['EC2_DIR'] + "/scripts")

from nova_essex_common import *

try:
    sys.path.append(os.environ['EC2_DIR'] + "/scripts")
    from neuca_quantum_common import *
    from nova_essex_common import *
except Exception as e:
    print 'Error in neuca-quantum-add-iface: cannot import neuca_quantum_common.py'
    print str(e) 
    sys.exit(1)

try:
    # OPEN THE LOG 
    LOG.basicConfig(level=LOG.DEBUG, filename='/dev/null')

    if not os.path.exists(os.environ['EC2_LOG_DIR']):
        os.makedirs(os.environ['EC2_LOG_DIR'])

    handler = LOG.handlers.RotatingFileHandler(os.environ['EC2_LOG_DIR'] + '/' + os.environ['EC2_LOG_FILE'],
                                               backupCount=10, maxBytes=50000000)

    if os.environ['EC2_LOG_LEVEL'].lower() == 'debug':
        handler.setLevel(logging.DEBUG)
    elif os.environ['EC2_LOG_LEVEL'].lower() == 'error':
        handler.setLevel(logging.ERROR)
    elif os.environ['EC2_LOG_LEVEL'].lower() == 'info':
        handler.setLevel(logging.INFO)
    else:
        handler.setLevel(logging.INFO)

    formatter = logging.Formatter('%(asctime)s -- neuca-quantum-add-iface %(process)d %(levelname)s : %(message)s')
    handler.setFormatter(formatter)

    LOG.getLogger('').addHandler(handler)

    LOG.info('Starting Logger')

except Exception as e:
    print 'Error in neuca-quantum-add-iface: Cannot open log file'
    print type(e)
    print e.args
    print e
    sys.exit(1)

# log the environment
for i in os.environ:
    LOG.debug(str(i) + ": " + str(os.environ[i]))

try:
    # DO THE WORK
    LOG.debug("neuca-quantum-add-iface: " + str(sys.argv))

    network_uuid = NEuca_Quantum_Network.get_network_uuid(os.environ['QUANTUM_TENANT_ID'],
                                                          os.environ['QUANTUM_NET_VLAN'],
                                                          os.environ['QUANTUM_NET_NETWORK'],
                                                          os.environ['QUANTUM_NET_TYPE'])
    if network_uuid == None:
        LOG.error("neuca-quantum-add-iface: no quantum network found for vlan: " + os.environ[
            'QUANTUM_NET_VLAN'] + ", network: " + os.environ['QUANTUM_NET_NETWORK'])
        sys.exit(1)

    iface_uuid = NEuca_Quantum_Network.add_iface_to_network(os.environ['QUANTUM_TENANT_ID'],
                                                            network_uuid,
                                                            os.environ['QUANTUM_NET_INSTANCE_NAME'],
                                                            VM.get_instance_name_by_ID(os.environ['QUANTUM_NET_INSTANCE_NAME']),
                                                            os.environ['QUANTUM_NET_IFACE_MAC'])

    print iface_uuid

except Exception as e:
    if str(e).find("error code: 409") != -1 :
        LOG.debug("neuca-quantum-add-iface: interface already exists, ignore the error")
        sys.exit(0)

    LOG.error("neuca-quantum-add-iface: " + str(type(e)) + " : " + str(e) + "\n" + str(traceback.format_exc()))
    sys.exit(1)

sys.exit(0)
